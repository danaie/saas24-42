<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">100</intProp>
        <intProp name="ThreadGroup.ramp_time">15</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">5</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post data" enabled="false">
          <stringProp name="HTTPSampler.path">http://localhost:3010/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;locations&quot; : [&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.99983328183838,&#xd;
        &quot;Longitude&quot;: 23.74317714798427&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.966783510525985,&#xd;
        &quot;Longitude&quot;: 23.778605533642235&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.9990464764814,&#xd;
        &quot;Longitude&quot;: 23.773251398190194&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.974070236340665,&#xd;
        &quot;Longitude&quot;: 23.737519890565082&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.99763705556787,&#xd;
        &quot;Longitude&quot;: 23.76632669971703&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.987158185269436,&#xd;
        &quot;Longitude&quot;: 23.760040398809927&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.96565952612894,&#xd;
        &quot;Longitude&quot;: 23.78044816563277&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 38.00816194011881,&#xd;
        &quot;Longitude&quot;: 23.743726736188382&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.983474656462256,&#xd;
        &quot;Longitude&quot;: 23.73256864917707&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.96362413346355,&#xd;
        &quot;Longitude&quot;: 23.77785820154608&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.96581060070882,&#xd;
        &quot;Longitude&quot;: 23.72133687257313&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.97624293546459,&#xd;
        &quot;Longitude&quot;: 23.740238201740137&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 38.00566809733227,&#xd;
        &quot;Longitude&quot;: 23.728089082692076&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 38.00132387722171,&#xd;
        &quot;Longitude&quot;: 23.75830400972441&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.96320247915091,&#xd;
        &quot;Longitude&quot;: 23.785174964462342&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.965357705819066,&#xd;
        &quot;Longitude&quot;: 23.74320004992697&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.9692186084866,&#xd;
        &quot;Longitude&quot;: 23.785110852487332&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.98271697637991,&#xd;
        &quot;Longitude&quot;: 23.73542153051244&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.97230013076112,&#xd;
        &quot;Longitude&quot;: 23.788423933330492&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.97827880279073,&#xd;
        &quot;Longitude&quot;: 23.75884558944574&#xd;
        }&#xd;
  ],&#xd;
    &quot;num_vehicles&quot; : 10000,&#xd;
    &quot;depot&quot; : 0,&#xd;
    &quot;max_distance&quot; : 1000000,&#xd;
    &quot;user_id&quot; : 15,&#xd;
    &quot;username&quot; : &quot;Manos&quot;,&#xd;
    &quot;submission_name&quot; :&quot;first_sub&quot;,&#xd;
    &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;,)}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get all pending/running">
          <stringProp name="HTTPSampler.path">http://localhost:5000/getall</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get analytics for all">
          <stringProp name="HTTPSampler.path">http://localhost:3080/admin_analytics</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post fast problem">
          <stringProp name="HTTPSampler.path">http://localhost:3010/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;locations&quot; : [&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.99983328183838,&#xd;
        &quot;Longitude&quot;: 23.74317714798427&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.966783510525985,&#xd;
        &quot;Longitude&quot;: 23.778605533642235&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.9990464764814,&#xd;
        &quot;Longitude&quot;: 23.773251398190194&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.974070236340665,&#xd;
        &quot;Longitude&quot;: 23.737519890565082&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.99763705556787,&#xd;
        &quot;Longitude&quot;: 23.76632669971703&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.987158185269436,&#xd;
        &quot;Longitude&quot;: 23.760040398809927&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.96565952612894,&#xd;
        &quot;Longitude&quot;: 23.78044816563277&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 38.00816194011881,&#xd;
        &quot;Longitude&quot;: 23.743726736188382&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.983474656462256,&#xd;
        &quot;Longitude&quot;: 23.73256864917707&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.96362413346355,&#xd;
        &quot;Longitude&quot;: 23.77785820154608&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.96581060070882,&#xd;
        &quot;Longitude&quot;: 23.72133687257313&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.97624293546459,&#xd;
        &quot;Longitude&quot;: 23.740238201740137&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 38.00566809733227,&#xd;
        &quot;Longitude&quot;: 23.728089082692076&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 38.00132387722171,&#xd;
        &quot;Longitude&quot;: 23.75830400972441&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.96320247915091,&#xd;
        &quot;Longitude&quot;: 23.785174964462342&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.965357705819066,&#xd;
        &quot;Longitude&quot;: 23.74320004992697&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.9692186084866,&#xd;
        &quot;Longitude&quot;: 23.785110852487332&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.98271697637991,&#xd;
        &quot;Longitude&quot;: 23.73542153051244&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.97230013076112,&#xd;
        &quot;Longitude&quot;: 23.788423933330492&#xd;
        },&#xd;
        {&#xd;
        &quot;Latitude&quot;: 37.97827880279073,&#xd;
        &quot;Longitude&quot;: 23.75884558944574&#xd;
        }&#xd;
  ],&#xd;
    &quot;num_vehicles&quot; : 100,&#xd;
    &quot;depot&quot; : 0,&#xd;
    &quot;max_distance&quot; : 1000000000,&#xd;
    &quot;user_id&quot; : 16,&#xd;
    &quot;username&quot; : &quot;Manos&quot;,&#xd;
    &quot;submission_name&quot; :&quot;first_sub&quot;,&#xd;
    &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;,)}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/spiros/softeng/saas2024-42/stress_test/stress_test.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="RespTimeGraph.interval">100</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">0</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request">
          <stringProp name="HTTPSampler.path">http://localhost:4040/queuenum</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">queueSize</stringProp>
            <stringProp name="RegexExtractor.regex">Submissions in Queue: (\d+)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">queueSize</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>false</label>
            <code>false</code>
            <message>false</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
          </value>
        </objProp>
        <stringProp name="filename">/home/spiros/softeng/saas2024-42/stress_test/queue_data.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
